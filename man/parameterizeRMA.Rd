% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parameterizeRMA.R
\name{parameterizeRMA}
\alias{parameterizeRMA}
\title{Calculate parameters for incremental RMA}
\usage{
parameterizeRMA(abatch)
}
\arguments{
\item{abatch}{An \code{\link[affy]{AffyBatch-class}} to calculate parameters on.}
}
\value{
A list containing
}
\description{
Calculate and store parameters for future use in incrementalRMA.
}
\details{
IncrementalRMA works by applying previous computed parameters from a full RMA process. This
function calculates the necessary parameters for future \code{\link{incrementalRMA}} use.

RMA consists of three steps: background correction, quantile normalization and median polish.
Background correction is done per-chip, so there is no need for pre-calculating parameters.
Quantile normalization computes values for each quantile in expression data and then sets the
intensity distribution equal to these quantiles. Median polish sweeps out row-wise and column-wise
medians from probe expression; column-wise effects are used as expression estimates.

Given the above description, quantiles (from quantile normalization) and row-wise effects
(from median polish) can be computed on a set of samples and stored. With this information,
\code{\link{incrementalRMA}} can then calculate gene expression from a new sample without
re-computing these parameters.

This function computes these parameters and stores them in a list, such that the list can then
be used. The elements of the list currently include:
\itemize{
\item{\code{probeEffects}}{Row-wise effects from median polish step.}
\item{\code{normalizationVector}}{Quantile values from quantile normalization step.}
\item{\code{referenceCELFiles}}{An \code{\link[affy]{AffyBatch-class}} containing the reference cel
files (for error calculations).}
}
A simple test of incrementalRMA is to parameterizeRMA, then apply incrementalRMA and compare with
using rma on the set. See the example for code to test this.
}
\examples{
\dontrun{
params <- parameterizeRMA(abatch)

all.equal(exprs(incrementalRMA(abatch, parameterizeRMA(abatch))), exprs(affy::rma(abatch)))
}
}
